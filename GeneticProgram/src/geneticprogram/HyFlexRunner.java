/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package geneticprogram;

import AbstractClasses.HyperHeuristic;
import AbstractClasses.ProblemDomain;
import BinPacking.BinPacking;
import Examples.ExampleHyperHeuristic1;
import FlowShop.FlowShop;
import PersonnelScheduling.PersonnelScheduling;
import SAT.SAT;
import VRP.VRP;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;
import travelingSalesmanProblem.TSP;

/**
 *
 * @author rudo
 */
public class HyFlexRunner {

          private final long time;// = 600000;
          private final int number_of_hyperheuristics;// = 1;
          private final int problem;// = 0;
          private final int instance;// = 0;//This should be between 0-4 inclusive.
          private final Random rng;//

          /* These are parameters were used for the competition, so if they are changed then the results may not be comparable to those of the competition */
          private final int number_of_runs = 31;
          private static final int domains = 6;
          private static final int instances = 5;

          private static long instanceseed;
          private static String resultsfolder;
          private long[][][] instance_seeds;

          /**
           * @param time
           * @param numhh
           * @param problem
           * @param instance
           */
          public HyFlexRunner(long time, int numhh, int problem, int instance) {
                    this.time = time;
                    this.number_of_hyperheuristics = numhh;
                    this.problem = problem;
                    this.instance = instance;
                    this.rng = new Random(123456789);
                    this.instance_seeds = new long[domains][instances][number_of_runs];
                    for (int x = 0; x < domains; x++) {
                              for (int y = 0; y < instances; y++) {
                                        for (int r = 0; r < number_of_runs; r++) {
                                                  instance_seeds[x][y][r] = rng.nextLong();
                                        }
                              }
                    }
          }

          /**
           * @param prog
           * @return 
           */
          public SelectivePeturbativeHyperHeuristic loadHyperHeuristic(Program prog) { 
                    SelectivePeturbativeHyperHeuristic sphh = new SelectivePeturbativeHyperHeuristic(prog, rng.nextLong()); 
                    sphh.setTimeLimit(time);
                    return sphh;
          }

          public ProblemDomain loadProblemDomain(int number) throws Exception {
                    ProblemDomain p;
                    switch (number) {
                              case 0:
                                        p = new SAT(instanceseed);
                                        break;
                              case 1:
                                        p = new BinPacking(instanceseed);
                                        break;
                              case 2:
                                        p = new PersonnelScheduling(instanceseed);
                                        break;
                              case 3:
                                        p = new FlowShop(instanceseed);
                                        break;
                              case 4:
                                        p = new TSP(instanceseed);
                                        break;
                              case 5:
                                        p = new VRP(instanceseed);
                                        break;
                              default:
                                        throw new Exception("There is no problem domain with this index");
                              /*System.err.println("there is no problem domain with this index");
                                        p = new BinPacking(rng.nextLong());
                                        System.exit(0);*/
                    }
                    return p;
          }

          public void run() {
                    int[][] instances_to_use = new int[domains][];
                    /*
		 * These instances are generated by CompetitionInstanceSelector.java
		 * Ten instances are included for each problem domain, but these are the instances selected for use in the competition.
		 * The last two instances of the first four domains were hidden instances.
                     */
                    int[] sat = {3, 5, 4, 10, 11};
                    int[] bp = {7, 1, 9, 10, 11};
                    int[] ps = {5, 9, 8, 10, 11};
                    int[] fs = {1, 8, 3, 10, 11};
                    int[] tsp = {0, 8, 2, 7, 6};
                    int[] vrp = {6, 2, 5, 1, 9};

                    instances_to_use[0] = sat;
                    instances_to_use[1] = bp;
                    instances_to_use[2] = ps;
                    instances_to_use[3] = fs;
                    instances_to_use[4] = tsp;
                    instances_to_use[5] = vrp;
                    try {
                              // FileWriter fwriter = new FileWriter("results/" + problem + "-" + instance + ".txt");
                              FileWriter fwriter = new FileWriter("/media/rudo/Storage/02 - Homework/Computer Science/Honours/COS 700/Project/COS700_Project/results/" + problem + "-" + instance + ".txt");
                              PrintWriter printer = new PrintWriter(fwriter);

                              System.out.println("PROBLEM DOMAIN " + resultsfolder);
                              printer.println("PROBLEM DOMAIN " + resultsfolder);
                              int instancetouse = instances_to_use[problem][instance];
                              System.out.println("  instance " + instancetouse + " ");
                              printer.println("  instance " + instancetouse + " ");

                              FileWriter f = new FileWriter("results/" + resultsfolder + "/instance" + instance + ".txt");
                              PrintWriter buffprint = new PrintWriter(f);
                              for (int run = 0; run < number_of_runs; run++) {
                                        instanceseed = instance_seeds[problem][instance][run];
                                        System.out.println("    RUN " + run + " " + instanceseed);
                                        printer.println("    RUN " + run);
                                        for (int hyperheuristic = 0; hyperheuristic < number_of_hyperheuristics; hyperheuristic++) {
                                                  SelectivePeturbativeHyperHeuristic h = loadHyperHeuristic( );
                                                  ProblemDomain p = loadProblemDomain(problem);
                                                   
                                                  System.out.print("      HYPER HEURISTIC " + h.toString());
                                                  p.loadInstance(instancetouse);
                                                  h.loadProblemDomain(p);

                                                  long initialTime2 = System.currentTimeMillis();
                                                  h.run();

                                                  int[] i = p.getHeuristicCallRecord();
                                                  int counter = 0;
                                                  for (int y : i) {
                                                            counter += y;
                                                  }
                                                  System.out.println("\t" + h.getBestSolutionValue() + "\t" + (h.getElapsedTime() / 1000.0) + "\t" + (System.currentTimeMillis() - initialTime2) / 1000.0 + "\t" + counter);
                                                  printer.println("\t" + h.getBestSolutionValue() + "\t" + (h.getElapsedTime() / 1000.0) + "\t" + (System.currentTimeMillis() - initialTime2) / 1000.0 + "\t" + counter);
                                                  buffprint.print(h.getBestSolutionValue() + " ");

                                                  FileWriter f1 = new FileWriter("results/" + resultsfolder + "/time" + instance + ".txt", true);
                                                  PrintWriter buffprint1 = new PrintWriter(f1);
                                                  double[] u = h.getFitnessTrace();
                                                  for (double y : u) {
                                                            buffprint1.print(y + " ");
                                                  }
                                                  buffprint1.println();
                                                  buffprint1.close();
                                                  f1.close();
                                        }
                                        buffprint.println();
                              }
                              printer.close();
                              fwriter.close();
                              buffprint.close();
                              f.close();

                    } catch (IOException a1) {
                              System.err.println(a1.getMessage());
                              System.exit(0);
                    }
          }

}
