package geneticprogram;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;

import travelingSalesmanProblem.TSP;
import AbstractClasses.HyperHeuristic;
import AbstractClasses.ProblemDomain;
import BinPacking.BinPacking;
import FlowShop.FlowShop;
import PersonnelScheduling.PersonnelScheduling;
import SAT.SAT;
import VRP.VRP;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;

public class CompetitionRunner extends Thread {

          /* These are parameters which can be changed.
	 * time - set to ten minutes, but this may need to change depending on your machine spec. Refer to http://www.asap.cs.nott.ac.uk/chesc2011/benchmarking.html
	 * numberofhyperheuristics - the number you wish to test in the same run
	 * problem - the selected domain
	 * instance - the selected instance of the problem domain. This should be between 0-4 inclusive
	 * rng - select a random seed
           */
          private static final long time = 100;//600000;
          private static final int numberofhyperheuristics = 1;
          private static int problem = 0;
          private static int instance = 0;//This should be between 0-4 inclusive.
          private static Random rng = new Random(123456789);

          /* These are parameters were used for the competition, so if they are changed then the results may not be comparable to those of the competition
           */
          private static int numberofruns = 31;
          private static final int domains = 6;
          private static final int instances = 5;
          private static long instanceseed;
          private static String resultsfolder;
          private long[][][] instanceseeds = null;
          private final Program prog;

          public static HyperHeuristic loadHyperHeuristic(Program prog, long timeLimit, Random rng) {
                    HyperHeuristic h;
                    h = new SelectivePeturbativeHyperHeuristic(prog, rng.nextLong());
                    //h = new ExampleHyperHeuristic1(rng.nextLong());
                    h.setTimeLimit(timeLimit);
                    return h;
          }

          public static ProblemDomain loadProblemDomain(int number) {
                    ProblemDomain p;
                    switch (number) {
                              case 0:
                                        p = new SAT(instanceseed);
                                        break;
                              case 1:
                                        p = new BinPacking(instanceseed);
                                        break;
                              case 2:
                                        p = new PersonnelScheduling(instanceseed);
                                        break;
                              case 3:
                                        p = new FlowShop(instanceseed);
                                        break;
                              case 4:
                                        p = new TSP(instanceseed);
                                        break;
                              case 5:
                                        p = new VRP(instanceseed);
                                        break;
                              default:
                                        System.err.println("there is no problem domain with this index");
                                        p = new BinPacking(rng.nextLong());
                                        System.exit(0);
                    }
                    return p;
          }

          public CompetitionRunner(Program prog) {
                    this.prog = prog;
                    rng = new Random(123456789);
                    instanceseeds = new long[domains][instances][numberofruns];

                    for (int x = 0; x < domains; x++) {
                              for (int y = 0; y < instances; y++) {
                                        for (int r = 0; r < numberofruns; r++) {
                                                  instanceseeds[x][y][r] = rng.nextLong();
                                        }
                              }
                    }
          }

          @Override
          public void run() {
                    int[][] instances_to_use = new int[domains][];
                    /*
		 * These instances are generated by CompetitionInstanceSelector.java
		 * Ten instances are included for each problem domain, but these are the instances selected for use in the competition.
		 * The last two instances of the first four domains were hidden instances.
                     */
                    int[] sat = {3, 5, 4, 10, 11};
                    int[] bp = {7, 1, 9, 10, 11};
                    int[] ps = {5, 9, 8, 10, 11};
                    int[] fs = {1, 8, 3, 10, 11};
                    int[] tsp = {0, 8, 2, 7, 6};
                    int[] vrp = {6, 2, 5, 1, 9};

                    instances_to_use[0] = sat;
                    instances_to_use[1] = bp;
                    instances_to_use[2] = ps;
                    instances_to_use[3] = fs;
                    instances_to_use[4] = tsp;
                    instances_to_use[5] = vrp;
                    List<String> printer_content = new ArrayList<>();
                    StringBuilder buffer_printer_content = new StringBuilder();
                    //FileWriter fwriter = new FileWriter("results/" + problem + "-" + instance + ".txt");
                    //PrintWriter printer = new PrintWriter(fwriter);
                    resultsfolder = "not worked";
                    switch (problem) {
                              case 0:
                                        resultsfolder = "SAT";
                                        break;
                              case 1:
                                        resultsfolder = "BinPacking";
                                        break;
                              case 2:
                                        resultsfolder = "PersonnelScheduling";
                                        break;
                              case 3:
                                        resultsfolder = "FlowShop";
                                        break;
                              case 4:
                                        resultsfolder = "TSP";
                                        break;
                              case 5:
                                        resultsfolder = "VRP";
                                        break;
                              default:
                                        System.err.println("wrong input for the problem domain");
                                        System.exit(-1);
                    }
                    System.out.println("PROBLEM DOMAIN " + resultsfolder);
                    printer_content.add("PROBLEM DOMAIN " + resultsfolder);
                    int instancetouse = instances_to_use[problem][instance];
                    System.out.println("  instance " + instancetouse + " ");
                    printer_content.add("  instance " + instancetouse + " ");
                    //FileWriter f = new FileWriter("results/" + resultsfolder + "/instance" + instance + ".txt");
                    //PrintWriter buffprint = new PrintWriter(f);
                    for (int run = 0; run < numberofruns; run++) {
                              instanceseed = instanceseeds[problem][instance][run];
                              System.out.println("    RUN " + run + " " + instanceseed);
                              printer_content.add("    RUN " + run);
                              for (int hyperheuristic = 0; hyperheuristic < 1; hyperheuristic++) {

                                        ProblemDomain p = loadProblemDomain(problem);
                                        HyperHeuristic h = loadHyperHeuristic(this.prog, time, rng);
                                        System.out.print("      HYPER HEURISTIC " + h.toString());
                                        p.loadInstance(instancetouse);
                                        h.loadProblemDomain(p);
                                        long initialTime2 = System.currentTimeMillis();
                                        h.run();
                                        System.out.println("done");
                                        int[] i = p.getHeuristicCallRecord();
                                        int counter = 0;
                                        for (int y : i) {
                                                  counter += y;
                                        }
                                        System.out.println("\t" + h.getBestSolutionValue() + "\t" + (h.getElapsedTime() / 1000.0) + "\t" + (System.currentTimeMillis() - initialTime2) / 1000.0 + "\t" + counter);
                                        printer_content.add("\t" + h.getBestSolutionValue() + "\t" + (h.getElapsedTime() / 1000.0) + "\t" + (System.currentTimeMillis() - initialTime2) / 1000.0 + "\t" + counter);

                                        buffer_printer_content.append(h.getBestSolutionValue()).append(" ");

                                        StringBuilder buffer_printer_content_1 = new StringBuilder();
                                        //FileWriter f1 = new FileWriter("./results/" + resultsfolder + "/time" + instance + ".txt", true);
                                        //PrintWriter buffprint1 = new PrintWriter(f1);
                                        double[] u = h.getFitnessTrace();
                                        for (double y : u) {
                                                  buffer_printer_content_1.append(y).append(" ");
                                        }
                                        buffer_printer_content_1.append("\n");
                                        try {
                                                  Path pathtofile = Paths.get("./results/" + resultsfolder + "/time" + instance + ".txt");
                                                  if (!Files.exists(pathtofile)) {
                                                            Files.createDirectories(pathtofile.getParent());
                                                            Files.createFile(pathtofile);
                                                  }
                                                  Files.write(pathtofile, printer_content.toString().getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
                                        } catch (Exception e) {
                                                  e.printStackTrace();
                                        }

                              }
                              buffer_printer_content.append("\n");
                    }
                    try {
                              Path pathtofile = Paths.get("./results/" + problem + "-" + instance + ".txt");
                              if (!Files.exists(pathtofile)) {
                                        Files.createDirectories(pathtofile.getParent());
                                        Files.createFile(pathtofile);
                              }
                              Files.write(pathtofile, printer_content.toString().getBytes(), StandardOpenOption.CREATE); 
                              pathtofile = Paths.get("./results/" + resultsfolder + "/instance" + instance + ".txt");
                              if (!Files.exists(pathtofile)) {
                                        Files.createDirectories(pathtofile.getParent());
                                        Files.createFile(pathtofile);
                              }
                              Files.write(pathtofile, printer_content.toString().getBytes(), StandardOpenOption.CREATE); 
                               
                    } catch (Exception e) {
                              e.printStackTrace();
                    }

          }

}
